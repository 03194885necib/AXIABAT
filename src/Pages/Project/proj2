import React, { useEffect, useState } from "react";
import { collection, addDoc, getDocs } from "firebase/firestore"; 
import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
import { db } from "../../firebase"; 

import "./projet.css";

function Home() {
  const [isProjectModalOpen, setIsProjectModalOpen] = useState(false);
  const [isArticleModalOpen, setIsArticleModalOpen] = useState(false);
  const [projects, setProjects] = useState([]);
  const [selectedProjectId, setSelectedProjectId] = useState(""); // Projet sélectionné pour l'ajout d'article
  const [articles, setArticles] = useState([]); // Liste des articles existants
  const [selectedArticles, setSelectedArticles] = useState([]);
  const[SecondStep,setSecondStep]=useState(false)
  
  // État pour stocker les données d'un projet
  const [project, setProject] = useState({
    name: "",
    description: "",
    banque: "",
    date_approbation: "",
    delai: "",
    date_demarrage: "",
    status: "bien",
    articles: ""
  });

  // État pour stocker les données d'un article
  const [article, setArticle] = useState({
    numero: "",
    designation: "",
    unite: "",
    quantite: "",
    prix: ""
  });


  const handleNextStep = (e) => {
    e.preventDefault();
    setSecondStep(true);
  };
  
  const handlePreviousStep = () => {
    setSecondStep(false);
  };
  
  // Fonction pour récupérer les projets depuis Firebase
  const fetchProjects = async () => {
    const querySnapshot = await getDocs(collection(db, "projects"));
    const projectList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    setProjects(projectList);
  };
  const fetchArticles = async () => {
    const querySnapshot = await getDocs(collection(db, "articles"));
    const articleList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    setArticles(articleList);
  };

  useEffect(() => {
    fetchProjects();
    fetchArticles();
    fetchCategories();
  }, []);

  const openProjectModal = () => {
    setSelectedArticles([]); // Réinitialiser la liste des articles sélectionnés
    setIsProjectModalOpen(true);
  };
  
  const closeProjectModal = () => setIsProjectModalOpen(false);
  const openArticleModal = (projectId) => {
    setSelectedProjectId(projectId);
    setIsArticleModalOpen(true);
  };
  const closeArticleModal = () => setIsArticleModalOpen(false);

  // Gérer les changements dans les inputs
  const handleChangeProject = (e) => {
    setProject({ ...project, [e.target.name]: e.target.value });
  };


  const handleAddArticle = (e) => {
    const articleId = e.target.value;
    const article = articles.find(a => a.id === articleId);

    if (article && !selectedArticles.some(a => a.id === article.id)) {
      setSelectedArticles([...selectedArticles, article]);
    }
  };

   // Supprimer un article sélectionné
   const handleRemoveArticle = (articleId) => {
    setSelectedArticles(selectedArticles.filter(a => a.id !== articleId));
  };
  const handleChangeArticle = (e) => {
    setArticle({ ...article, [e.target.name]: e.target.value });
  };




  // Ajouter une nouvelle article
  const handleSubmitArticle2 = async (e) => {
     e.preventDefault();
      try {
    await addDoc(collection(db, "articles"), article);
   console.log("article ajouté avec succès !");
      closeArticleModal();
       fetchArticles();
    } catch (error) {
         console.error("Erreur lors de l'ajout :", error);
       }
     };

   // Ajouter un projet avec les articles sélectionnés
   const handleSubmitProject = async (e) => {
    e.preventDefault();
    try {
      const projectRef = await addDoc(collection(db, "projects"), {
        ...project,
        articles: selectedArticles.map(a => a.id), // Stocker seulement les ID des articles
      });

      console.log("Projet ajouté avec succès !");
      closeProjectModal();
      fetchProjects();
    } catch (error) {
      console.error("Erreur lors de l'ajout :", error);
    }
  };

  // Ajouter un article à un projet spécifique
  const handleSubmitArticle = async (e) => {
    e.preventDefault();
    if (!selectedProjectId) return;

    try {
      await addDoc(collection(db, `projects/${selectedProjectId}/articles`), article);
      console.log("Article ajouté avec succès !");
      closeArticleModal();
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'article :", error);
    }
  };


  const step1=()=>{
    setSecondStep(true)
  }
  return (
    <div className="home-container">
      <div className="home-details">
        <div className="home-recentOrders">
          <div className="home-cardHeader">
            <h2>Projects</h2>
            <button className="home-btn" onClick={openProjectModal}>New Project</button>
          </div>

          {/* Tableau des projets */}
          <table className="home-table">
            <thead>
              <tr>
                <th>Nom</th>
                <th>Description</th>
                <th>Banque</th>
                <th>Date Approbation</th>
                <th>Délais</th>
                <th>Date Démarrage</th>
                <th>Status</th>
                <th>Articles</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {projects.map((proj) => (
                <tr key={proj.id}>
                  <td>{proj.name}</td>
                  <td>{proj.description}</td>
                  <td>{proj.banque}</td>
                  <td>{proj.date_approbation}</td>
                  <td>{proj.delai}</td>
                  <td>{proj.date_demarrage}</td>
                  <td>{proj.status}</td>
                  <td>{proj.articles}</td>
                  <td>
                    <button className="home-btn" onClick={() => openArticleModal(proj.id)}>Ajouter Article</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modal pour ajouter un projet */}
      

{/* {isProjectModalOpen && (
  
        <div className="home-modal">
          <div className="home-modal-content">
            <span className="home-close" onClick={closeProjectModal}>&times;</span>
            
            <h3>Créer un nouveau projet</h3>

            <form onSubmit={handleSubmitProject}>
              <div>
              <input type="text" name="name" placeholder="Nom du projet" value={project.name} onChange={handleChangeProject} required />
              <input type="text" name="description" placeholder="Description" value={project.description} onChange={handleChangeProject} required />
              <input type="text" name="banque" placeholder="Banque" value={project.banque} onChange={handleChangeProject} required />
              <input type="date" name="date_approbation" value={project.date_approbation} onChange={handleChangeProject} required />
              <input type="text" name="delai" placeholder="Délai" value={project.delai} onChange={handleChangeProject} required />
              <input type="date" name="date_demarrage" value={project.date_demarrage} onChange={handleChangeProject} required />
<br></br>
<br></br>
            
              <br></br>
              <br></br>
              </div>
              <button onClick={step1}>Suivant</button>
            </form>
          </div>
        </div>
      )} */}

{isProjectModalOpen && (
  <div className="home-modal">
    <div className="home-modal-content">
      <span className="home-close" onClick={closeProjectModal}>&times;</span>
      
      <h3>Créer un nouveau projet</h3>

      {!SecondStep ? (
        // Étape 1 : Formulaire de base du projet
        <form onSubmit={handleNextStep}>
          <input type="text" name="name" placeholder="Nom du projet" value={project.name} onChange={handleChangeProject} required />
          <input type="text" name="description" placeholder="Description" value={project.description} onChange={handleChangeProject} required />
          <input type="text" name="banque" placeholder="Banque" value={project.banque} onChange={handleChangeProject} required />
          <input type="date" name="date_approbation" value={project.date_approbation} onChange={handleChangeProject} required />
          <input type="text" name="delai" placeholder="Délai" value={project.delai} onChange={handleChangeProject} required />
          <input type="date" name="date_demarrage" value={project.date_demarrage} onChange={handleChangeProject} required />
          
          <button type="submit">Suivant</button>
        </form>
      ) : (
        // Étape 2 : Ajouter des articles au projet
        <div>
          <h3>Ajouter des articles au projet</h3>

          <select onChange={handleAddArticle}>
            <option value="">Sélectionner un article</option>
            {articles.map((article) => (
              <option key={article.id} value={article.id}>
                {article.designation}
              </option>
            ))}
          </select>

          <ul>
            {selectedArticles.map((article) => (
              <li key={article.id}>
                {article.designation} 
                <button onClick={() => handleRemoveArticle(article.id)}>❌</button>
              </li>
            ))}
          </ul>

          <button onClick={handlePreviousStep}>Retour</button>
          <button onClick={handleSubmitProject}>Créer le projet</button>
        </div>
      )}
    </div>
  </div>
)}



      {/* Modal pour ajouter un article */}
      {isArticleModalOpen && (
        <div className="home-modal">
          <div className="home-modal-content">
            <span className="home-close" onClick={closeArticleModal}>&times;</span>
            <h3>Ajouter un Article</h3>
            <form onSubmit={handleSubmitArticle}>
              <input type="text" name="numero" placeholder="Numéro de l'article" value={article.numero} onChange={handleChangeArticle} required />
              <input type="text" name="designation" placeholder="Désignation des ouvrages" value={article.designation} onChange={handleChangeArticle} required />
              <input type="text" name="unite" placeholder="Unité de mesure" value={article.unite} onChange={handleChangeArticle} required />
              <input type="number" name="quantite" placeholder="Quantité prévue" value={article.quantite} onChange={handleChangeArticle} required />
              <input type="number" name="prix" placeholder="Prix unitaire" value={article.prix} onChange={handleChangeArticle} required />
             
             
              <button type="submit">Ajouter</button>
            </form>
          </div>
        </div>



      )}
    </div>
  );
}

export default Home;
